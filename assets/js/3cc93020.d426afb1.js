"use strict";(self.webpackChunkhtml_bundler_docs=self.webpackChunkhtml_bundler_docs||[]).push([[5774],{7196:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"faq/disable-resolving-in-commented-out-tag","title":"How to disable resolving in commented out tag","description":"In default attributes, files will be resolved automatically, regardless of whether the tag is commented out or not.","source":"@site/docs/faq/disable-resolving-in-commented-out-tag.md","sourceDirName":"faq","slug":"/faq/disable-resolving-in-commented-out-tag","permalink":"/html-bundler-webpack-plugin/faq/disable-resolving-in-commented-out-tag","draft":false,"unlisted":false,"editUrl":"https://github.com/webdiscus/html-bundler-docs/tree/docusaurus/docs/faq/disable-resolving-in-commented-out-tag.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"faqSidebar","previous":{"title":"How to use @import url() in CSS","permalink":"/html-bundler-webpack-plugin/faq/import-url-in-css"},"next":{"title":"How to split CSS files","permalink":"/html-bundler-webpack-plugin/faq/split-css"}}');var i=n(4848),r=n(8453);const o={sidebar_position:3},a="How to disable resolving in commented out tag",l={},c=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"how-to-disable-resolving-in-commented-out-tag",children:"How to disable resolving in commented out tag"})}),"\n",(0,i.jsxs)(t.p,{children:["In ",(0,i.jsx)(t.a,{href:"/plugin-options-sources#default-attributes",children:"default attributes"}),", files will be resolved automatically, regardless of whether the tag is commented out or not.\nThis is not a bug, it is a feature for very fast attribute parsing."]}),"\n",(0,i.jsxs)(t.p,{children:["If you commented out a tag and don't want to resolve files in the tag's ",(0,i.jsx)(t.a,{href:"/plugin-options-sources#default-attributes",children:"attributes"}),", rename the attribute.\nFor example: ",(0,i.jsx)(t.code,{children:"href"})," -> ",(0,i.jsx)(t.code,{children:"x-href"})," or ",(0,i.jsx)(t.code,{children:"src"})," -> ",(0,i.jsx)(t.code,{children:"x-src"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-html",children:'\x3c!-- <link x-href="./styles.scss" rel="stylesheet /> --\x3e\n\x3c!-- <script x-src="./main.js" defer="defer"><\/script> --\x3e\n\x3c!-- <img x-src="./image.png"> --\x3e\n'})}),"\n",(0,i.jsxs)(t.p,{children:["If used any ",(0,i.jsx)(t.a,{href:"/category/template-engines",children:"template engine"})," (defaults is ",(0,i.jsx)(t.a,{href:"/guides/preprocessor/eta",children:"Eta"}),")\nthen can be used ",(0,i.jsx)(t.a,{href:"https://eta.js.org/docs/intro/template-syntax",children:"templating comments"})," ",(0,i.jsx)(t.code,{children:"<%/* ... */%>"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-html",children:'<%/* <link rel="stylesheet href="./style.scss" /> Single line comment w/o resolving */%>\n\n<%/*\n  Multiline comment w/o resolving of files in attributes\n  <img src="./image1.png" />\n  <img src="./image2.png" />\n*/%>\n'})}),"\n",(0,i.jsx)(t.p,{children:"The generated HTML will not contain templating comments."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);